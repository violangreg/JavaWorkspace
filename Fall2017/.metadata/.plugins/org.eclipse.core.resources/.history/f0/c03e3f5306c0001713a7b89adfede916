import java.util.Random;

/*
 * Implementation of a singly linked list 
 * Commit your file into the SVN (Not BeachBoard)
 * Please do NOT modify the class names.
*/
public class LinkedList<E> {
	private class ListNode<E> {
		public E data;
		public ListNode<E> next;
	}
	
	private ListNode<E> head;
	private int size;
		
	public LinkedList() {		
		size = 0;
	}
	
	public int size() {
		return size;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("LinkedList [");
		for (int i = 0; i < size; i++) {
			sb.append(this.get(i));
			if (i != size - 1) sb.append(", ");
		}
		sb.append("]");
		return sb.toString();
	}
	
/*
 1. Implement the methods add(E e), add(int i, E e), get(int index), remove(int index), and remove(E e) - 3 pts each
 You should update size after adding and removing an element.
*/
	/**
	 * Appends the specified element to the end of this list
	 * @param e - element to be appended to this list
	 */	 
	public void add(E e) {
		// create a new node to add to the list
		ListNode<E> new_node = new ListNode<E>();
		new_node.data = e;
		new_node.next = null;
		if(head == null){
			head = new_node;
			return;
		}
		// starting from the head node, crawl to the end of the list
		ListNode<E> last = head;
		while(last.next != null){
			last = last.next;
		}
		last.next = new_node;
		size++;
		return;
	}
	// push a new node to the front of the list, time complexity O(1)
	public void push(E e){
		ListNode<E> new_node = new ListNode<E>();
		new_node.data = e;
		new_node.next = head;
		head = new_node;
	}

	/**
	 * Inserts the specified element at the specified position in this list 
	 * @param i - index at which the specified element is to be inserted
	 * @param e - element to be inserted
	 */
	public void add(int i, E e) {
		if(i > size || i < 0) {
			System.out.println("Invalid index"); 
			return;
		}
		ListNode<E> prev_node = (LinkedList<E>.ListNode<E>) get(i-1);
		ListNode<E> new_node = new ListNode<E>();
		new_node.data = e;
		new_node.next = prev_node;
		prev_node.next = new_node;
	}

	/**
	 * Returns the element at the specified position in this list.
	 * @param index - index of the element to return
	 * @return the element at the specified position in this list
	 */
	public E get(int index) {
        ListNode<E> current = head;
        int count = 0; /* index of Node we are
                          currently looking at */
        while (current != null)
        {
            if (count == index)
                return current.data;
            count++;
            current = current.next;
        }
 
        /* if we get to this line, the caller was asking
        for a non-existent element so we assert fail */
        assert(false);
        return null;
	}	
	
	/**
	 * Removes the element at the specified position in this list
	 * @param index - the index of the element to be removed
	 * @return the element previously at the specified position
	 */
	public E remove(int index) {
		return null;
	}
	
	/**
	 * Removes the first occurrence of the specified element from this list, if it is present
	 * @param e - element to be removed from this list, if present
	 * @return true if this list contained the specified element
	 */
	public boolean remove(E e) {
		return false;
	}

/*
 *** O(1) space complexity ***
2. Reverse the list - 10 pts
	The space (not time) complexity should be O(1). 
	Write a program that reverses the order of the nodes.
	1 -> 2 -> 3 -> 4 
		==> 4 -> 3 -> 2 -> 1  
 */
	public void reverse() {

	}
		
/*
 *** O(1) space complexity ***
3. Remove duplicates - 10 pts
	The space (not time) complexity should be O(1).
	Write a program that removes duplicates.
	1 -> 4 -> 2 -> 4 -> 3
		==> 1 -> 4 -> 2 -> 3
 */
	public void trim() {
		
	}
	
/*
4. (Extra) Partition the list - 10 pts
 	Write a program to partition the list around a value x such that all nodes less than x come before all nodes greater than of equal to x.
 	2 -> 9 -> 8 -> 3 -> 4 -> 7 [x = 5]
 	 	==> 2 -> 3 -> 4 -> 9 -> 8 -> 7
 */
	public void partition(int x) {
		
	}
	
	public static void main(String[] args) {		
		LinkedList<Integer> sort_numbers = new LinkedList<Integer>();
		for (int i = 0; i < 10; i++) {
			sort_numbers.add(i);			
		}
		System.out.println(sort_numbers.toString());
		ListNode<Integer> test = new ListNode<Integer>();
		System.out.println(sort_numbers.add(5, ););
		sort_numbers.reverse();
		System.out.println("Reverse: " + sort_numbers);
		
		Random rand = new Random();
		LinkedList<Integer> rand_numbers = new LinkedList<Integer>();
		for (int i = 0; i < 20; i++) {
			rand_numbers.add(rand.nextInt(10));			
		}
		rand_numbers.trim();
		System.out.println("Trim: " + rand_numbers);
		
		rand_numbers.partition(5);
		System.out.println("Partition: " + rand_numbers);
	}
}
