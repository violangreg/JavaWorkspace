import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

public class Panel extends JPanel implements KeyListener, MouseListener, MouseMotionListener, Runnable{
	private Hunter hunter;
	private QuarryGenerator qGen;
	private ArrayList<Obstacle> obstacles;
	private ArrayList<Quarry> quarries;
	
	private BufferedImage background;
	private ArrayList<BufferedImage> images;
	private final int imageSize = 6;
	
	// WINDOW SIZE FOR QUARRIES HITTING THE EDGE
	private final int WIDTH_OFF_SET = 405;
	private final int HEIGHT_OFF_SET = 175;
	
	private Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	private int screenWidth = (int) screenSize.getWidth() - WIDTH_OFF_SET;
	private int screenHeight = (int) screenSize.getHeight() - HEIGHT_OFF_SET;
	
	// INSTANTIATING OBJECTS ONCE GO HERE
	public Panel(){
		Random r = new Random();
		// CREATING HUNTER, GENERATOR, ARRAYLISTS
		this.setBackground(Color.BLACK);
		Point hunterPoint = new Point(r.nextInt(screenWidth), 
				r.nextInt(screenHeight));
		hunter = new Hunter(hunterPoint, 40, 40, 3, 3); 
		
		qGen = new QuarryGenerator();
		obstacles = new ArrayList<Obstacle>();
		quarries = new ArrayList<Quarry>();	
		
		// ADDING LISTENERS
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
		setFocusable(true);
		
		// ADDING BACKGROUND IMAGE
		try {
			background = ImageIO.read(new File("background.png"));

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// CREATING OBSTACLES
		for(int i = 0; i < 5; i++){
			Point obsTempPoint = new Point(r.nextInt(screenWidth), r.nextInt(screenHeight));
			int type = r.nextInt(3); // TODO TEMPLATE NEED TO CHANGE
			Obstacle obsTemp = new Obstacle(obsTempPoint, type);
			obstacles.add(obsTemp);
		}
		
	}
	
	//---------- ALL COLLISION TESTS GO HERE -----------
	public void testCollisions(){
		// COLLISION FOR OBSTACLES
		//Rectangle hunt = new Rectangle(hunter.getLocation().x, hunter.getLocation().y, hunter.getWidth(), hunter.getHeight());
		
		// HUNTER AND OBSTACLE COLLISION
		for(int i = 0; i < obstacles.size(); i++){
			if(obstacles.get(i).testCollision(hunter)){
				for(int j = 0; j < 4; j++){
					hunter.spinCW();
				}
				hunter.stopMoving();
				hunter.move();
			}
			
		}
		
		// HUNTER AND QUARRY COLLISION ( HUNTER TAKE DAMAGE )
//		for(int i = 0; i < quarries.size(); i++){
//			if(quarries.get(i).)
//		}
		
		
		// QUARRY AND OBSTACLE COLLISION
		for(int i = 0; i < obstacles.size(); i++){
			for(int j = 0; j < quarries.size(); j++){
				if(obstacles.get(i).testCollision(quarries.get(j))){
					for(int k = 0; k < 4; k++){
						quarries.get(j).spinCW();
					}
					quarries.get(j).move();
				}
			}
		}
		
		
		// COLLISION FOR BULLETS AND OBSTACLES
//		for(int i = 0; i < hunter.bulletList().size(); i++){
//			for(int j = 0; j < obstacles.size(); j++){
//				if(hunter.bulletList().get(i).testCollision(obstacles.get(j))){
//					hunter.bulletList().remove(i);
//				}
//			}
//		}
		
		// COLLIDING OBSTACLES
//		for(int i = 0; i < obstacles.size(); i++){
//			Random random = new Random();
//			int rand = random.nextInt(obstacles.size());
//			if(obstacles.get(i).isCollided(obstacles.get(rand))){
//				Point p = obstacles.get(i).randomPosition();
//				obstacles.get(i).setLocation(p.x - 3, p.y - 3);
//			}
//		}
		
		// For randomly directing the quarry
		Random rand = new Random();
		int rDir = rand.nextInt(8);
		
		// move the quarries
		if(!quarries.isEmpty()){
			for(int i = 0; i < quarries.size(); i++){
				
				quarries.get(i).toggleMoving();
				//quarries.get(i).setDirection(rDir);
			
				// IF QUARRIES HIT A WALl
				if((int) quarries.get(i).getLocation().getX() > screenWidth - 25){
					quarries.remove(i);
				}
				if((int) quarries.get(i).getLocation().getY() > screenHeight - 25){
					quarries.remove(i);
				}
				if((int) quarries.get(i).getLocation().getX() < 10){
					quarries.remove(i);
				}
				if((int) quarries.get(i).getLocation().getY() < 10){
					quarries.remove(i);
				}
//			
			}
		}
		
		// HUNTER'S BULLET HITTING QUARRIES
		if (!quarries.isEmpty()) {
			for (int i = 0; i < quarries.size(); i++) {
				if (hunter.testHit(quarries.get(i))) { // SEE IF HUNTER's, // BULLETS ARE HITTING A, // QUARRY
					quarries.get(i).takeHit(); // QUARRY TAKES DAMAGE
					if (quarries.get(i).isDead()) { // IF QUARRIES DIES
						quarries.get(i).stopMoving();// QUARRY STOP MOVING
						// NOT SURE HOW TO IMPLEMENT TO WAITING A COUPLE SEC
						// BEFORE REMOVING IT
						quarries.remove(i); // REMOVE QUARRY
					}
				}
			}
		}
		
		// HUNTER'S BULLET HITTING OBSTACLES
		if(!obstacles.isEmpty()){
			for(int i = 0; i < obstacles.size(); i++){
				if(hunter.testHit(obstacles.get(i))){
				}
			}
		}
		
	}
	
	// --------- UPDATE / RENDERING / REDRAWING OBJECTS GO HERE
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		//background
		g.drawImage(background, 0, 0, this);
		
		// update hunter
		hunter.update(g);
		
		// update quarries
		if(!quarries.isEmpty()){
			for(int i = 0; i < quarries.size(); i++){
				quarries.get(i).update(g);
			}
		}
		
		// update obstacles
		if(!obstacles.isEmpty()){
			for(int i = 0; i < obstacles.size(); i++){
				obstacles.get(i).update(g);
			}
		}
	}
	@Override
	public void mouseDragged(MouseEvent e) {}
	@Override
	public void mouseMoved(MouseEvent e) {
		Point click = new Point(e.getX(), e.getY());
		Rectangle north = new Rectangle((int) hunter.getLocation().getX(), (int) hunter.getLocation().getY(), 
				hunter.getWidth() + screenWidth, hunter.getHeight() + screenHeight);
		Rectangle south = new Rectangle((int) hunter.getLocation().getX(), (int) hunter.getLocation().getY(), 
				hunter.getWidth(), hunter.getHeight());
		Rectangle east = new Rectangle((int) hunter.getLocation().getX(), (int) hunter.getLocation().getY(), 
				hunter.getWidth(), hunter.getHeight());
		Rectangle west = new Rectangle((int) hunter.getLocation().getX(), (int) hunter.getLocation().getY(), 
				hunter.getWidth(), hunter.getHeight());
		// TODO Auto-generated method stub
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		Point click = new Point(e.getX(), e.getY());
		System.out.println(click);
		
		hunter.setDirection(5);
		// TODO not finished, can't figure it out
		// mouseClicked() – called when the mouse is clicked (pressed and released). 
	}
	@Override
	public void mouseEntered(MouseEvent e) {}
	@Override
	public void mouseExited(MouseEvent e) {}
	@Override
	public void mousePressed(MouseEvent e) {}
	@Override
	public void mouseReleased(MouseEvent e) {}
	@Override
	public void keyPressed(KeyEvent e) {
		
		// Special keys
		// Moves the hunter
		if(e.getKeyCode() == KeyEvent.VK_ENTER){
			hunter.toggleMoving();
		}
		// Hunter shoots
		if(e.getKeyCode() == KeyEvent.VK_SPACE){
			hunter.fireBullet();
			
		}
		
		// ARROWKEY controls
		if(e.getKeyCode() == KeyEvent.VK_UP){ // optional: don't need
			quarries.add(qGen.generateQuarry());
		}
		if(e.getKeyCode() == KeyEvent.VK_DOWN){ // optional: don't need
			System.out.println(hunter.getSpeed());
		}
		if(e.getKeyCode() == KeyEvent.VK_LEFT){
			hunter.spinCCW();
		}
		if(e.getKeyCode() == KeyEvent.VK_RIGHT){
			hunter.spinCW();
		}
		
		// KEYPAD controls, optional
		if(e.getKeyCode() == KeyEvent.VK_NUMPAD8){
			
		}
		if(e.getKeyCode() == KeyEvent.VK_NUMPAD2){
			
		}
	}
	@Override
	public void keyReleased(KeyEvent e) {}
	@Override
	public void keyTyped(KeyEvent e) {}
	
	// ---------- put objects thatll run concurrently / continously ----------
	@Override
	public void run() {
		while(true){
			
			//obstacle/quarries and bullet collision?
			testCollisions();
			
			repaint();
			try{
				Thread.sleep(16);
			}catch(InterruptedException e){}
		}
		
	}
	
}
