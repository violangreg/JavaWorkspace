import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

import javax.imageio.ImageIO;

public class Hunter extends Entity{
	private Bullet bullet;
	
	private LinkedList<Bullet> bulletList;
	
	private BufferedImage img;
	
	private final int OFF_SET = 7;
	private final int WIDTH_OFF_SET = 415;
	private final int HEIGHT_OFF_SET = 185;
	
	public Hunter(Point p, int w, int h, int hp, int sp){
		super(p, w, h, hp, sp, 1); // TODO not too sure what direction here again @_@
		bulletList = new LinkedList<Bullet>();
		
		try {
			img = ImageIO.read(new File("hunter7.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		// set hunter at a random position
	}
	public void fireBullet(){
		bullet = new Bullet(this.getLocation(), 3, 3, 1, 5, getDirection());
		//bullet.setLocation(this.getLocation().x + OFF_SET - 2, this.getLocation().y + OFF_SET + 2);
		bulletList.add(bullet);

	}
	public LinkedList<Bullet> bulletList(){
		return bulletList;
	}
	public boolean testHit(Entity e){
		// COLLISION FOR BULLETS AND ENTITIES E
		boolean hit = false;
		for(int i = 0; i < bulletList.size(); i++){ //ARRAY OF BULLETS
			if(bulletList.get(i).testCollision(e)){ //USES testCollision from Bullet Class
				hit = true;
				System.out.println("TEST HIT"); // TESTING POINT
				bulletList.remove(i); // REMOVES BULLET IN THE ARRAY
			}
		}
		return hit;
	}
	@Override
	public void draw(Graphics g, Point p, int w, int h, int dir) {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		int width = (int) screenSize.getWidth();
		int height = (int) screenSize.getHeight();
		
		// test templates
		w = 15;
		h = 15;
		
		// update bullet (if fired)
		if(!bulletList.isEmpty()){
			for(int i = 0; i < bulletList.size(); i++){
				bulletList.get(i).toggleMoving();
				bulletList.get(i).update(g);
			}
		}
		
		// max x = 676 ,  max y = 353
		// delete bullet when it goes out of bounce of the screen
		for(int i = 0; i < bulletList.size(); i++){
			Point bulletLoc = bulletList.get(i).getLocation();
			if(bulletLoc.x > width - WIDTH_OFF_SET || bulletLoc.y > height - HEIGHT_OFF_SET){
				bulletList.remove(i);
			}
			if(bulletLoc.x < 0 || bulletLoc.y < 0){
				bulletList.remove(i);
			}
		}
		
		
//		for(int i = 0; i < bulletList.size(); i++){
//			if(bulletList.get(i).testCollision())
//		}
		
		// template to render the hunter
		//g.setColor(Color.WHITE);
		
		// HUNTER IMAGE
		g.drawImage(img,(int) p.getX(), (int) p.getY(), null);
		
		g.drawRect((int) p.getX(), (int) p.getY(), 40, 40);
		
		//g.fillRect((int) p.getX(), (int) p.getY(), 25, 25);
		//g.fillOval((int) p.getX(), (int) p.getY(), w, h);
		
		g.setColor(Color.BLACK);
		
		
		switch(dir){
		case 1:
			// north
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() + OFF_SET, (int) p.getY() - 15);
			break;
		case 2:
			// north-east
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() + 20, (int) p.getY() - 5);
			break;
		case 3:
			// east
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() + 25, (int) p.getY() + OFF_SET);
			break;
		case 4:
			// south-east
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() + 20, (int) p.getY() + 20);
			break;
		case 5:
			// south
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() + OFF_SET, (int) p.getY() + 25);
			break;
		case 6:
			// south-west
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() - 5, (int) p.getY() + 20);
			break;
		case 7:
			// west
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() - 15, (int) p.getY() + OFF_SET);
			break;
		case 8:
			// north-west
			g.drawLine((int) p.getX() + OFF_SET, (int) p.getY() + OFF_SET, (int) p.getX() - 10, (int) p.getY() - 10);
			break;
		}
	}
}
